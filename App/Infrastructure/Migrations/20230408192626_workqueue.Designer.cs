// <auto-generated />
using System;
using MachineHealthCheck.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MachineHealthCheck.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230408192626_workqueue")]
    partial class workqueue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.CPUInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrClockSpeed")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfCores")
                        .HasColumnType("int");

                    b.Property<int>("NumOfLogicalProcessors")
                        .HasColumnType("int");

                    b.Property<int>("PercentInUse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.ToTable("CPUInfo");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.DiskInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CapacityMb")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("FreeSpaceMb")
                        .HasColumnType("bigint");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PercentUtilization")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId");

                    b.ToTable("DiskInfo");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.HealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MachineInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OSVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MachineInfoId");

                    b.ToTable("HealthCheck");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.MachineInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isVerified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MachineInfo");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.MemoryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("PercentInUse")
                        .HasColumnType("float");

                    b.Property<decimal>("TotalPhysicalMb")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId")
                        .IsUnique();

                    b.ToTable("MemoryInfo");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.SqlInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasSqlServer")
                        .HasColumnType("bit");

                    b.Property<Guid>("HealthCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SqlServerVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckId")
                        .IsUnique();

                    b.ToTable("SqlInfo");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.WorkQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WorkQueue");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.CPUInfo", b =>
                {
                    b.HasOne("MachineHealthCheck.Domain.Entities.HealthCheck", "HealthCheck")
                        .WithMany("CPUInfo")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.DiskInfo", b =>
                {
                    b.HasOne("MachineHealthCheck.Domain.Entities.HealthCheck", "HealthCheck")
                        .WithMany("DiskInfo")
                        .HasForeignKey("HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.HealthCheck", b =>
                {
                    b.HasOne("MachineHealthCheck.Domain.Entities.MachineInfo", "MachineInfo")
                        .WithMany("HealthChecks")
                        .HasForeignKey("MachineInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineInfo");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.MemoryInfo", b =>
                {
                    b.HasOne("MachineHealthCheck.Domain.Entities.HealthCheck", "HealthCheck")
                        .WithOne("MemoryInfo")
                        .HasForeignKey("MachineHealthCheck.Domain.Entities.MemoryInfo", "HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.SqlInfo", b =>
                {
                    b.HasOne("MachineHealthCheck.Domain.Entities.HealthCheck", "HealthCheck")
                        .WithOne("SqlInfo")
                        .HasForeignKey("MachineHealthCheck.Domain.Entities.SqlInfo", "HealthCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.HealthCheck", b =>
                {
                    b.Navigation("CPUInfo");

                    b.Navigation("DiskInfo");

                    b.Navigation("MemoryInfo")
                        .IsRequired();

                    b.Navigation("SqlInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MachineHealthCheck.Domain.Entities.MachineInfo", b =>
                {
                    b.Navigation("HealthChecks");
                });
#pragma warning restore 612, 618
        }
    }
}
